import type {AxiosInstance, AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig} from "axios";
import {AxiosError} from "axios";
import NProgress from "nprogress";
import {axios} from "@/http/axios/index";

const logOnDev = (message: string) => {
    console.log(message);
}


const onRequest = (config: InternalAxiosRequestConfig): InternalAxiosRequestConfig => {
    NProgress.start();
    const {method, url} = config;

    logOnDev(`[API] ${method?.toUpperCase()} ${url} | Request`)

    if (method === "get") {
        config.timeout = 15000;
    }
    return config
}


const onResponse = (response: AxiosResponse): AxiosResponse => {
    NProgress.done();
    const {method, url} = response.config;
    const {status} = response;

    logOnDev(`[API] ${method?.toUpperCase()} ${url} | Response ${status}`)
    return response;
}

const onErrorResponse = (error: AxiosError | Error): Promise<AxiosError> => {
    if ((error as AxiosError).isAxiosError) {
        const {message} = error;
        const {method, url} = (error as AxiosError).config as AxiosRequestConfig;
        const {statusText, status} = (error as AxiosError).response as AxiosResponse ?? {};

        logOnDev(
            `üö® [API] ${method?.toUpperCase()} ${url} | Error ${status} ${message}`
        );

        switch (status) {
            case 401: {
                window.location.href = '/login';
                break;
            }
            case 403: {
                // "Permission denied"
                break;
            }
            case 404: {
                // "Invalid request"
                window.location.href = '/not-found';
                break;
            }
            case 500: {
                // "Server error"
                window.location.href = '/internal-server-error';
                break;
            }
            default: {
                // "Unknown error occurred"
                break;
            }
        }

        if (status === 401) {
            sessionStorage.removeItem("token");
        }
    } else {
        logOnDev(`[API] | Error ${error.message}`);
    }

    return Promise.reject(error);
};

// Axios Interceptor: Gi√∫p can thi·ªáp v√†o lu·ªìng x·ª≠ l√Ω ƒë·ªÉ th·ª±c hi·ªán c√°c t√°c v·ª• tr∆∞·ªõc khi g·ª≠i v√† sau khi nh·∫≠n y√™u c·∫ßu
const setupInterceptors = (instance: AxiosInstance): AxiosInstance => {
    // Request intercepter: Ch·∫∑n v√† x·ª≠ l√Ω c√°c y√™u c·∫ßu tr∆∞·ªõc khi ch√∫ng ƒë∆∞·ª£c g·ª≠i t·ªõi server
    instance.interceptors.request.use(onRequest, onErrorResponse)

    // Ch·∫∑n v√† x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server tr∆∞·ªõc khi d·ªØ li·ªáu ƒë∆∞·ª£c tr·∫£ v·ªÅ. M·ªôt s·ªë tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng ph·ªï bi·∫øn
    // X·ª≠ l√Ω l·ªói to√†n c·ª•c: nh∆∞ 401 Unauthorized ho·∫∑c 500 Internal Server Error
    // T·ª± ƒë·ªông Refresh Token: n·∫øu token h·∫øt h·∫°n v√† retry l·∫°i request
    // Chuy·ªÉn ƒë·ªïi ho·∫∑c ƒë·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ cho ph√π h·ª£p v·ªõi ·ª©ng d·ª•ng
    instance.interceptors.response.use(onResponse, onErrorResponse)

    return instance
}

setupInterceptors(axios)